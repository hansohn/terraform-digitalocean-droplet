---
name: terraform

on:
  workflow_dispatch:
  push:
    branches:
      - '*'
    pull_request:
      types:
        - opened
        - reopened
        - synchronize
    tags:
      - 'v?[0-9]+.[0-9]+.[0-9]+'

jobs:
  terraform_modules:
    name: loc_tf_modules
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
      - name: Build Matrix
        id: matrix
        run: |
          DIRS=$(python -c "import json; import glob; print(json.dumps([x.replace('/versions.tf', '') for x in glob.glob('./**/versions.tf', recursive=True)]))")
          echo directories=$DIRS >> $GITHUB_OUTPUT
    outputs:
      directories: ${{ steps.matrix.outputs.directories }}

  terraform_versions:
    name: get_tf_vers
    needs:
      - terraform_modules
    runs-on: ubuntu-latest
    strategy:
      matrix:
        directory: ${{ fromJson(needs.terraform_modules.outputs.directories) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Terraform min/max versions
        id: versions
        uses: clowdhaus/terraform-min-max@v1.1.1
        with:
          directory: ${{ matrix.directory }}
    outputs:
      minVersion: ${{ steps.versions.outputs.minVersion }}
      maxVersion: ${{ steps.versions.outputs.maxVersion }}

  validate_min_versions:
    name: test_tf_min_ver
    needs:
      - terraform_modules
      - terraform_versions
    runs-on: ubuntu-latest
    container: hansohn/terraform:latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.terraform_modules.outputs.directories) }}
        version:
          - ${{ needs.terraform_versions.outputs.minVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Terraform v${{ matrix.version }}
        run: tfget ${{ matrix.version }}
      - name: Validate
        run: |
            cd ${{ matrix.directory }}
            terraform init --backend=false
            terraform validate

  validate_max_versions:
    name: test_tf_max_ver
    needs:
      - terraform_modules
      - terraform_versions
    runs-on: ubuntu-latest
    container: hansohn/terraform:latest
    strategy:
      fail-fast: false
      matrix:
        directory: ${{ fromJson(needs.terraform_modules.outputs.directories) }}
        version:
          - ${{ needs.terraform_versions.outputs.maxVersion }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install Terraform v${{ matrix.version }}
        run: tfget ${{ matrix.version }}
      - name: Terraform Fmt
        run: |
            cd ${{ matrix.directory }}
            terraform fmt --check
      - name: Validate
        run: |
            cd ${{ matrix.directory }}
            terraform init --backend=false
            terraform validate
      - name: Tflint
        run: |
            tflint \
              --chdir=${{ matrix.directory }} \
              --only=terraform_comment_syntax \
              --only=terraform_deprecated_index \
              --only=terraform_deprecated_interpolation \
              --only=terraform_documented_outputs \
              --only=terraform_documented_variables \
              --only=terraform_module_pinned_source \
              --only=terraform_naming_convention \
              --only=terraform_required_providers \
              --only=terraform_required_version \
              --only=terraform_typed_variables \
              --only=terraform_workspace_remote
      - name: Terraform Docs
        if: ${{ !startsWith(matrix.directory, './examples/') }}
        run: |
            terraform-docs \
              --lockfile=false \
              --output-check=true \
              --output-file README.md \
              --output-mode inject \
              markdown \
              ${{ matrix.directory }}

  slack:
    if: always()
    needs:
      - terraform_modules
      - terraform_versions
      - validate_min_versions
      - validate_max_versions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Slack Notification
        uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ secrets.SLACK_WEBHOOK }}
          channel: ${{ secrets.SLACK_CHANNEL_ID }}
          name: ${{ secrets.SLACK_USERNAME }}
          icon_url: "https://cdn-icons-png.flaticon.com/512/25/25231.png"
